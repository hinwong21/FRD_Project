{"version":3,"file":"static/js/849.89160f44.chunk.js","mappings":"kKAaM,MAAOA,UAAuBC,EAAAA,GAApCC,c,oBACU,KAAAC,MAAQ,kBA+ElB,CA7ESC,gBAAeC,GAA4B,IAA3B,MAAEF,GAAyBE,EAC3B,kBAAVF,IACTG,KAAKH,MAAQA,EAEjB,CAEOC,UAAUG,GAGf,MAAO,CAAEC,MAFKF,KAAKG,KAAKC,QAAQJ,KAAKK,YAAYJ,EAAQK,MAG3D,CAEOR,UAAUG,GACfD,KAAKG,KAAKI,QAAQP,KAAKK,YAAYJ,EAAQK,KAAML,EAAQC,MAC3D,CAEOJ,aAAaG,GAClBD,KAAKG,KAAKK,WAAWR,KAAKK,YAAYJ,EAAQK,KAChD,CAEOR,aAGL,MAAO,CAAEW,KAFIT,KAAKU,UAAUC,KAAIC,GAAKA,EAAEC,UAAUb,KAAKc,OAAOC,UAG/D,CAEOjB,cACL,IAAK,MAAMQ,KAAON,KAAKU,UACrBV,KAAKG,KAAKK,WAAWF,EAEzB,CAEOR,gB,MACL,MAAMkB,EAAqB,GACrBC,EAAqB,GACrBC,EAAY,QACZT,EAAOU,OAAOV,KAAKT,KAAKG,MAAMiB,QAAOR,GAA8B,IAAzBA,EAAES,QAAQH,KAE1D,IAAK,MAAMI,KAAUb,EAAM,CACzB,MAAMH,EAAMgB,EAAOT,UAAUK,EAAUH,QACjCb,EAAiC,QAA5BqB,EAAGvB,KAAKG,KAAKC,QAAQkB,UAAO,IAAAC,EAAAA,EAAI,IACnCrB,MAAOsB,SAAuBxB,KAAKyB,IAAI,CAAEnB,QAErB,kBAAjBkB,EACTP,EAASS,KAAKpB,UAERN,KAAK2B,IAAI,CAAErB,MAAKJ,UACtBc,EAASU,KAAKpB,G,CAIlB,MAAO,CAAEU,WAAUC,WACrB,CAEOnB,kBACL,MACMW,EAAOU,OAAOV,KAAKT,KAAKG,MAAMiB,QAAOR,GAA8B,IAAzBA,EAAES,QADhC,WAElB,IAAK,MAAMC,KAAUb,EACnBT,KAAKG,KAAKK,WAAWc,EAEzB,CAEYnB,WACV,OAAOyB,OAAOC,YAChB,CAEYf,aACV,MAAsB,kBAAfd,KAAKH,MAA4B,GAAK,GAAGG,KAAKH,QACvD,CAEQa,UACN,OAAOS,OAAOV,KAAKT,KAAKG,MAAMiB,QAAOR,GAAgC,IAA3BA,EAAES,QAAQrB,KAAKc,SAC3D,CAEQT,YAAYC,GAClB,OAAON,KAAKc,OAASR,CACvB,E","sources":["../node_modules/@capacitor/preferences/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  PreferencesPlugin,\n  ConfigureOptions,\n  GetOptions,\n  GetResult,\n  SetOptions,\n  RemoveOptions,\n  KeysResult,\n  MigrateResult,\n} from './definitions';\n\nexport class PreferencesWeb extends WebPlugin implements PreferencesPlugin {\n  private group = 'CapacitorStorage';\n\n  public async configure({ group }: ConfigureOptions): Promise<void> {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  public async get(options: GetOptions): Promise<GetResult> {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n\n    return { value };\n  }\n\n  public async set(options: SetOptions): Promise<void> {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  public async remove(options: RemoveOptions): Promise<void> {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  public async keys(): Promise<KeysResult> {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n\n    return { keys };\n  }\n\n  public async clear(): Promise<void> {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  public async migrate(): Promise<MigrateResult> {\n    const migrated: string[] = [];\n    const existing: string[] = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = this.impl.getItem(oldkey) ?? '';\n      const { value: currentValue } = await this.get({ key });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({ key, value });\n        migrated.push(key);\n      }\n    }\n\n    return { migrated, existing };\n  }\n\n  public async removeOld(): Promise<void> {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  private get impl(): Storage {\n    return window.localStorage;\n  }\n\n  private get prefix(): string {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  private rawKeys(): string[] {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  private applyPrefix(key: string) {\n    return this.prefix + key;\n  }\n}\n"],"names":["PreferencesWeb","WebPlugin","constructor","group","async","_ref","this","options","value","impl","getItem","applyPrefix","key","setItem","removeItem","keys","rawKeys","map","k","substring","prefix","length","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","_a","currentValue","get","push","set","window","localStorage"],"sourceRoot":""}